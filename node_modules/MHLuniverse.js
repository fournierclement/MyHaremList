var express = require('express');
var cookie = require('cookie-session');
var bodyParser = require('body-parser');
var urlencodedParser = bodyParser.urlencoded({ extended: false });
var bcrypt = require('bcrypt');
var pg = require('pg');

//insertUniverse(req,res,callback) -> callback(req,res,universnbr)
var insertUniverse = function(req,res,callback){
    pg.connect(process.env.DATABASE_URL, function(err, client, done){
        //handle error
        if(err) {
            done(client);
            console.log(err);
            return res.sendStatus(500);
        }

        client.query("INSERT INTO universe (universeName,universeDesc) VALUES ($1,$2) RETURNING universeNbr",
            [req.body.universeName, req.body.universeDesc],
            function(err,result){
            done(client);
            if(err)Â {
                //errors if already exist
                return res.status(400)
                    .render('universe.ejs',
                        {logs: req.session, error:"Name already taken."});
            }
            return callback(req,res,result.rows[0].universenbr);
        });
    });
}
exports.insertUniverse = insertUniverse;

//getUniversesByName(req,res,callback) -> callback(req,res,universe[]={key:data})
var getUniversesByName = function(req,res,callback){
    pg.connect(process.env.DATABASE_URL, function(err, client, done){
        //handle err
        if(err) {
          done(client);
          console.log(err);
          return res.sendStatus(500);
        }
        client.query("SELECT universeNbr, universeName, universeDesc FROM universe WHERE universeName ILIKE $1",
            ['%'+req.body.word+'%'], function(err, result){
            //errors ?
            done(client);
            if(err) {
                console.log(err);
                return res.sendStatus(500);
            }
            return callback(req,res,result.rows);
        });
    });    
}
exports.getUniversesByName = getUniversesByName;

//insertChar(req,res,callback) -> callback(req,res,charid)
var insertChar = function(req,res,callback){
    pg.connect(process.env.DATABASE_URL, function(err,client,done){
        if (err) {
                console.log(err);
                return res.sendStatus(500);
        }
        client.query("INSERT INTO characs (charname,alternames, chargender,chardesc,universename) VALUES ($1,$2,$3,$4,$5) RETURNING charId",
            [req.body.CharName, req.body.AlterNames, req.body.CharGender, req.body.CharDesc, req.body.UniverseName],
            function(err,result){
            done(client);
            if (err) {
                console.log(err);
                return res.sendStatus(500);
            }
            return callback(req,res,result.rows[0].charid);
        });
    });
}

exports.insertChar = insertChar;

//getUniversesByName(req,res,callback) -> callback(req,res,universe[]={key:data})
var getCharactersByName = function(req,res,callback){
    pg.connect(process.env.DATABASE_URL, function(err, client, done){
        //handle err
        if(err) {
          done(client);
          console.log(err);
          return res.sendStatus(500);
        }
        client.query("SELECT charId, charName FROM characs WHERE charName ILIKE $1",
            ['%'+req.body.word+'%'], function(err, result){
            //errors ?
            done(client);
            if(err) {
                console.log(err);
                return res.sendStatus(500);
            }
            return callback(req,res,result.rows);
        });
    });    
}

exports.getCharactersByName = getCharactersByName;