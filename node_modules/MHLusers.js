//
var express = require('express');
var cookie = require('cookie-session');
var bodyParser = require('body-parser');
var urlencodedParser = bodyParser.urlencoded({ extended: false });
var bcrypt = require('bcrypt');
var pg = require('pg');

//USERS QUERIES
//SIGN UP
var checkUser = function (req,res,client,done,callback) {
    client.query("SELECT nickname,email FROM users WHERE nickname = $1 OR email=$2",
                [req.body.nickname, req.body.email], function(err, result){
        if(err) {
            done(client);
            console.log(err);
            //errors still possible
            return res.render("user.ejs", {logs: req.session, error:"Something went bad, contact fournier.clt@gmail.com."},
                function(err, html){
                res.status(400).send(html);
            });
        }
        var message = "";
        for ( i = 0 ; i < result.rows.length ; i++) {
            if(req.body.nickname == result.rows[i].nickname){ message += "Nickname already taken.\n" ; }
            else if (req.body.email == result.rows[i].email){ message += "Email already use." ; }
        }
        return callback(req, res, client, done, message);
    });
}
var insertUser = function(req,res,client,done,callback){
    client.query("INSERT INTO users (nickname, email, password) VALUES ($1,$2,$3)",
        [req.body.nickname,req.body.email,req.body.password],
        function(err,result) {
        done(client);
        if(err)Â {
            console.log(err);
            //errors still possible
            return res.render("user.ejs", {logs: req.session, error:"Server Fail"},
                function(err, html){
                res.status(500).send(html);
            });
        }
        return callback(req,res);
    });
}

var postUser = function (req,res,callback){
    //Script it before stocking it.
    bcrypt.genSalt(10, function(err, salt) {
        bcrypt.hash(req.body.password, salt, function(err, hash) {
            req.body.password = hash;
            //post it in the rdbsm
            pg.connect(process.env.DATABASE_URL, function (err,client,done) {
               //Handle connection to psql errors
                if(err) {
                    done(client);
                    console.log(err);
                    return res.status(500).send(html);
                }
                //Check it
                checkUser(req,res, client,done,function(req,res,client,done,message){
                    //the message says if a nickname or an email is already taken
                    if( message != "" ) {
                        done(client);
                        return res.render("user.ejs",
                            {logs: req.session, error:message},
                            function(err, html){
                            res.status(400).send(html);
                        });
                    }
                    //let it flow.
                    return insertUser(req,res,client,done,callback);
                });
            });
        });
    });
}
exports.postUser = postUser;

var logUser = function(req,res,callback){
    pg.connect(process.env.DATABASE_URL, function(err, client, done) {
        // Handle connection errors
        if(err) {
          done(client);
          console.log(err);
          return res.sendStatus(500);
        }
        //Querying the password
        var query = client.query("SELECT password FROM users WHERE nickname = $1",
            [req.body.nickname], function(err,result){
            done(client);
            if(err) {
                done(client);
                console.log(error);
                return res.sendStatus(500);
            }
            if (typeof(result.rows[0]) != 'undefined') {
                bcrypt.compare(req.body.password,result.rows[0].password,
                    function(err, test) {
                    return callback(req,res,test);

                });
            }
            else { return callback(req,res,false); }
        });
    });
}
exports.logUser = logUser;